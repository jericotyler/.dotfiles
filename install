#!/bin/bash
# Methods and the like
log() {
    echo -e "[*] $1" >&2
}

prompt() {
    read -p "[*] $1 [y/N] " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return 1
    else
        return 0
    fi
}

pkgs_tricky=(
	"termite"
    "scrot"
    "rofi"
    "powerline"
    "powerline-fonts"
    "bumblbee"
    )

# Core packages Super dirty
pkgs=(
    #Core
    "bash-completion"
    "xorg-server"
    "xorg-apps"
    "xorg-xinit"
    "xorg-xbacklight"
    "nvidia"
    "xf86-video-intel"
    "xf86-video-vesa"
    "alsa-utils"
    "pulseaudio-alsa"
    "compton"
    "i3-gaps"
    "i3blocks-gaps"
    "i3lock-color-git"
    "i3status"
    "acpi_call"
    "network-manager-applet"
    "networkmanager-dispatcher-ntpd"
    "xfsudo"
    "arandr"
    "lxappearance-gtk3"
    "arc-gtk-theme"
    "gtk-theme-arc-grey-git"
    "numix-circle-icon-theme-git"
    "feh"
    "dmenu"
    "fish"
    "terminus-font"
    "imagemagick"
    "nemo"
    "nemo-preview"
    "neofetch"
    "sublime-text"
    "peazip-gtk2"
    "vivaldi"
    "yaourt"
)

pkgs_fonts=(
    "ttf-humor-sans"
    "ttf-liberation"
    "ttf-ms-fonts"
    "adobe-source-code-pro-fonts"
    "adobe-source-serif-pro-fonts"
    "adobe-source-sans-pro-fonts"
    "inconsolata-psf-git"
    #"awesome-terminal-fonts"
    "ttf-font-icons"
    "ttf-font-awesome"
    "adobe-source-han-sans-cn-fonts"
    "adobe-source-han-sans-kr-fonts"
    "adobe-source-han-sans-otc-fonts"
    "adobe-source-han-sans-tw-fonts"
    "adobe-source-han-serif-cn-fonts"
    "adobe-source-han-sans-jp-fonts"
    "adobe-source-han-serif-jp-fonts"
    "adobe-source-han-serif-kr-fonts"
    "adobe-source-han-serif-otc-fonts"
    "adobe-source-han-serif-tw-fonts"
    )

pkgs_secondary=(
    #others
    "bluez"
    "bluez-plugins"
    "blueman"
    "catimg"
    "escrotum-git"
    "gparted"
    "gptfdisk"
    "lib32-gtk2"
    "lib32-libpulse"
    "lib32-libxrandr"
    "lib32-openal"
    "ntfs-3g"
    "mesa-demos"
    "pavucontrol"
    "perl"
    "procps-ng"
    "psmisc"
    "python-pip"
    "sl"
    "systemd-sysvcompat"
    "tmux"
    "unrar"
    "viewnior"
    "vim"
    "xfsprogs"
    "yacpi"
    "zip"
    "remmina"
    "freerdp"
    "spotify"
    "plexmediaserver"
    "obs-studio"
)

# Optional extra packages that I enjoy having
pkgs_extra=(

    "baka-mplayer"
    "calibre"
    "cava"
    "cli-visualizer"
    "deluge"
    "filelight"
    "flashplayer-standalone"
    "kcc"
    "mplayer"
    "youtube-dl"
    "vivaldi-widevine"
    "tor-browser"
    "steam"
    "steam-native-runtime"
    "love"
    "skypeforlinux-bin"
    "nyancat"
    "pepper-flash"
    "multimc5"
)

#utils I sometimes need
pkgs_utils=(
    "tumbld-git"
    "ufraw-thumbnailer"
    "arch-install-scripts"
    "darktable-git"
    "freecad"
    "gqrx"
    "inkscape"
    "lolcat"
    "mangle-git"
    "unigine-valley"
    "scribus"
    "rainbow"
    "qemu"
    "ranger"
    "hexchat"
    "remmina-plugin-rdesktop"
    )

# Where ma' dotfiles at, yo?
stows=(
    "fish"
    "git"
    "termite"
    "mpv"
    "misc"
    "sublime"
    "wm"
    "xorg"
)

installsub() {
# Now we install things
# Sudo all day every day
log "Gonna need that password yo"
sudo -v

log "Checking to see if needed things are installed..."
sudo pacman -S  --ignore=gcc --needed --noconfirm base-devel expac yajl git stow

# Remove stows
log "Cleaning up existing shmuts..."
rm -rf ~/.config/fish
rm -rf ~/.config/git
rm -rf ~/.config/i3
rm -rf ~/.config/i3status
rm -rf ~/.config/mpv
rm -rf ~/.config/sublime-text-2
rm -rf ~/.tmux.conf
rm -rf ~/.xinitrc

# Install the damn dotfiles
log "Installing dotfiles..."
for ((i=0; i<=$((${#stows[@]} - 1)); i++)); do
    stow -d ~/.dotfiles -t ~ ${stows[i]}
    log "\t${stows[i]} dotfiles installed!"
done

# Install the prerequisites
log "Installing prerequisites..."

sudo rm -rf /etc/pacman.conf
sudo stow -d ~/.dotfiles -t / pacman-root
log "Pacman config installed!"

log "Resizing /tmp"
sudo mount -o remount,size=4G,noatime /tmp

log "Synchronizing repositories..."
sudo pacman -Syy

log "Checking for pacaur"
if [[ $(pacman -Qs pacaur) == "" ]]; then
    log "Fetching keys for packages..."
    gpg --recv-keys --keyserver hkp://pgp.mit.edu 1EB2638FF56C0C53
    sudo pacman-key --refresh-keys

    log "Building pacaur..."
    broot=$(mktemp -d)

    mkdir -p "$broot"
    cd "$broot" || exit 1

    git clone "https://aur.archlinux.org/cower.git"
    git clone "https://aur.archlinux.org/pacaur.git"

    cd "${broot}/cower" || exit 1
    makepkg -s -i --noconfirm

    cd "${broot}/pacaur" || exit 1
    makepkg -s -i --noconfirm

    log "Cleaning up..."
    cd "$HOME" || exit 1
    rm -rf "$broot"
else
    log "Looks like pacaur is already installed"
fi

# Install the main packages
log "Installing core packages..."
for ((i=0; i<=$((${#pkgs[@]} - 1)); i++)); do
    if [[ $(pacaur -Qs ${pkgs[i]}) == "" ]]; then
        pacaur --noconfirm --noedit -S ${pkgs[i]}
    fi
done
log "Done installing core packages"

log "Installing Fonts..."
for ((i=0; i<=$((${#pkgs_fonts[@]} - 1)); i++)); do
    if [[ $(pacaur -Qs ${pkgs_fonts[i]}) == "" ]]; then
        pacaur --noedit -S ${pkgs_fonts[i]}
    fi
done

log "Installing Secondary..."
for ((i=0; i<=$((${#pkgs_secondary[@]} - 1)); i++)); do
    if [[ $(pacaur -Qs ${pkgs_secondary[i]}) == "" ]]; then
        pacaur --noedit -S ${pkgs_secondary[i]}
    fi
done

log "Installing tricky packages..."
for ((i=0; i<=$((${#pkgs_tricky[@]} - 1)); i++)); do
    if [[ $(pacaur -Qs ${pkgs_tricky[i]}) == "" ]]; then
        pacaur --noedit -S ${pkgs_tricky[i]}
    fi
done
log "Done installing tricky packages"

# Install Fun?
if $(prompt "Install Funtime packages?"); then
    echo ""
    log "Installing extra packages..."
    for ((i=0; i<=$((${#pkgs_extra[@]} - 1)); i++)); do
        if [[ $(pacaur -Qs ${pkgs_extra[i]}) == "" ]]; then
            pacaur --noconfirm --noedit -S ${pkgs_extra[i]}
        fi
    done
    pacaur -S termite
    log "Done installing Funtime packages"
else
    echo
    log "If you say so"
fi

# Install Utils?
if $(prompt "Install extra packages?"); then
    echo ""
    log "Installing extra packages..."
    for ((i=0; i<=$((${#pkgs_utils[@]} - 1)); i++)); do
        if [[ $(pacaur -Qs ${pkgs_utils[i]}) == "" ]]; then
            pacaur --noconfirm --noedit -S ${pkgs_utils[i]}
        fi
    done
    log "Done installing extra packages"
else
    echo
    log "If you say so"
fi

# Remove orphans
if [[ ! $(pacman -Qtdq) == "" ]]; then
    log "Removing orphans..."
    sudo pacman -Rsn --noconfirm $(pacman -Qtdq)
else
    log "No orphans, huzza!"
fi

# Fix temp
log "Fixing /tmp size"
sudo mount -o remount,size=1G,noatime /tmp


# And done~
log "All done, have a good one"
SHELL=/usr/bin/fish
TERM=xterm-termite
exit 0
}

wget -q --tries=10 --timeout=20 --spider http://google.com
if [[ $? -eq 0 ]]; then
        echo "Online"
        installsub
else
        echo "Offline"
        log "OMG! Seriously dude? FIX YOUR GODDAMN INTERNET! Fucking Christ"
fi